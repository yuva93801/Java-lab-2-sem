print("1 string operation")
print("2 Tuple operation")
print("3 exit")
ch=input("enter ur choice:")
if ch=="1":
while True:
a=input("enter string 1: ")
b=input("enter string 2: ")
print("1 concatination \n 2 length \n 3 min \n
4 max \n 5 uppercase \n 6 lowercase \n 7 reverse \n 8 check digits \n 9
check alphabet \n 10 check alphanumeric")
c=input("enter ur choice:")
if c=="1":
print(a+b)
break
elif c=="2":
print(len(a))
break
elif c=="3":
print(min(a))
break
elif c=="4":
print(max(a))
break
elif c=="5":
print(a.upper())
break
elif c=="6":
print(a.lower())
break
elif c=="7":
print(a[::-1])
break
elif c=="8":
print(a.isdigit())
break
elif c=="9":
print(a.isalpha())
break
elif c=="10":
print(a.isalnum())
break
else:exit()
elif ch=="2":
while True:
t1=(1,2,6,3,2,8,3,6,5)
t2=("abc","a",2,5)
print(t1)
print(t2)
print("1 conctination\n2 length\n3 min\n4
max\n5 sum \n 6 count\n7 reverse\n8 index\n9 sorted\n10 printing tuple
twice")
c=input("enter ur choice:")
if c=="1":
print(t1+t2)
break
elif c=="2":
print(len(t1))
break
elif c=="3":
print(min(t1))
break
elif c=="4":
print(max(t1))
break
elif c=="5":
print(sum(t1))
break
elif c=="6":
print(t1.count(2))
break
elif c=="7":
print(t2[::-1])
break
elif c=="8":
print(t1.index("abc"))
break
elif c=="9":
print(sorted(t1))
break
elif c=="10":
print(t1*2)
break
else:
exit()
elif ch=="3":
exit()
else:
print("invalid operation")
----------2---------------
Lab2
a={1,5,7,8}
b={'a','abc',2,3}
print("set1=",a)
print("set2=",b)
l1=['abc',2,4,6]
l2=[5,6,10]
print("list1=",l1)
print("list2=",l2)
while True:
print("1.set operation")
print("2.list operation")
print("3. exit")
ch=int(input("enter your choice:"))
if ch==1:
print("1.add 2.checkmembership 3.union 4.intersection
5.difference 6.subset 7.symmetric_difference 8.length 9.pop 10.clear")
c=int(input("enter your choice:"))
if c==1:
a.add(10)
print(a)
elif c==2:
print(5 in a)
elif c==3:
print(a.union(b))
elif c==4:
print(a.intersection(b))
elif c==5:
print(a.difference(b))
elif c==6:
print(a.issubset(b))
elif c==7:
print(a.symmetric_difference(b))
elif c==8:
print(len(a))
elif c==9:
print(a.pop())
elif c==10:
a.clear()
print(a)
else:
exit()
elif ch==2:
print("1.conctination 2.length 3.reverse 4.sorted
5.convert to tuple 6.append 7.remove 8.slicing 9.pop 10. check
membership")
c=int(input("enter your choice:"))
if c==1:
print(l1+l2)
elif c==2:
print(len(l1))
elif c==3:
print(list(reversed(l1)))
elif c==4:
print(sorted(l2))
elif c==5:
print(tuple(l1))
elif c==6:
l1.append(30)
print(l1)
elif c==7:
l1.remove(6)
print(l1)
elif c==8:
print(l1[2:4])
elif c==9:
print(l1.pop())
elif c==10:
print(4 in l1)
else:
exit()
elif ch==3:
print("exiting...")
else:
print("invaild choice")
--------------3---------------
Lab 3
emp_dict = {}
class Employee:
def __init__(self, name, net_salary, role):
self.name = name
self.net_salary = net_salary
self.role = role
def display(self):
print("\nEmployee details: ")
print("Employee Name: ", self.name)
print("Net salary: ", self.net_salary)
print("Employee Job Role: ", self.role)
def calc_salary(self):
da = 0.15 * self.net_salary
final_sal = self.net_salary + da + 15000 + 1000 + 0.1 *
self.net_salary
print("Final Salary: ", final_sal)
def update_details(self, name, net_salary, role):
self.name, self.net_salary, self.role = name, net_salary, role
while True:
print(
"\nEnter 1 to add employee"
"\nEnter 2 to view an employee"
"\nEnter 3 to update employee details"
"\nEnter 4 to calculate final salary of an employee"
"\nEnter 5 to quit\n"
)
chc = int(input("Enter your choice: "))
if chc == 1:
emp_id = int(input("Enter Employee ID: "))
name=input("Enter name: ")
net_salary=int(input("Enter net salary: "))
role = (input("Enter job role: "))
emp_dict[emp_id] = Employee(name, net_salary, role)
print("Employee Added!")
elif chc == 2:
emp_dict[emp_id].display()
elif chc == 3:
name=input("Enter name: ")
net_salary=int(input("Enter net salary: "))
role =input("Enter job role: "),
emp_dict[emp_id].update_details(name, net_salary, role)
print("Employee details updated!")
elif chc==4:
emp_dict[emp_id].calc_salary()
elif chc == 5:
print("Exiting")
else:
print("invaild choice.")
---------4----------------
Lab 4
op.py
class Overload:
def __init__(self):
self.lst = []
def input_lst(self):
n = int(input("Enter number of elements you want: "))
for i in range(n):
num = int(input("Enter an element: "))
self.lst.append(num)
print("Entered list: ", self.lst)
def __add__(self, other):
new_lst = [self.lst[i] + other.lst[i] for i in
range(len(self.lst))]
print("New list after addition: ", new_lst)
def __mul__(self, other):
new_lst = [self.lst[i] * other.lst[i] for i in
range(len(self.lst))]
print("New list after multiplication: ", new_lst)
def __sub__(self, other):
new_lst = [self.lst[i] - other.lst[i] for i in
range(len(self.lst))]
print("New list after subtraction: ", new_lst)
def __floordiv__(self, other):
new_lst = [self.lst[i] // other.lst[i] for i in
range(len(self.lst))]
print("New list after floor division: ", new_lst)
main.py
from op import *
obj1 = Overload()
obj2 = Overload()
obj1.input_lst()
print("For list2: ")
obj2.input_lst()
while True:
print(
"Enter 1 to add lists"
"\nEnter 2 to multiply lists"
"\nEnter 3 to subtract lists"
"\nEnter 4 to divide lists"
"\nEnter 5 to exit"
)
chc = int(input("Enter your choice: "))
if chc == 1:
obj1 + obj2
elif chc == 2:
obj1 * obj2
elif chc == 3:
obj1 - obj2
elif chc == 4:
obj1 // obj2
elif chc == 5:
print("Exiting")
break
else:
print("Invalid input")
---------5--------------
Lab 5
Her
class Student:
def __init__(self, usn, name, age):
self.usn = usn
self.name = name
self.age = age
def display_info(self):
print("Name: ", self.name)
print("USN: ", self.usn)
print("Age: ", self.age)
class UGStudent(Student):
def __init__(self, usn, name, age, sem, fees, stipend):
Student.__init__(self, usn, name, age)
self.sem = sem
self.fees = fees
self.stipend = stipend
def display_data(self):
Student.display_info(self)
print("Sem: ", self.sem, "\nFees: ", self.fees, "\nStipend: ",
self.stipend)
class PGStudent(Student):
def __init__(self, usn, name, age, sem, fees, stipend):
Student.__init__(self, usn, name, age)
self.sem = sem
self.fees = fees
self.stipend = stipend
def display_data(self):
Student.display_info(self)
print("Sem: ", self.sem, "\nFees: ", self.fees, "\nStipend: ",
self.stipend, "\n")
s_dict = {}
while True:
print(
"\nEnter 1 to add UG Student"
"\nEnter 2 to add PG Student"
"\nEnter 3 to view all students"
"\nEnter 4 to break"
)
chc = int(input("Enter choice: "))
if chc == 1:
usn = input("Enter USN: ")
name = input("Enter Name: ")
age = int(input("Enter Age: "))
sem = int(input("Enter semester: "))
fees = int(input("Enter fees: "))
stipend = int(input("Enter Stipend: "))
s_dict[usn] = PGStudent(usn, name, age, sem, fees, stipend)
elif chc == 2:
usn = input("Enter USN: ")
name = input("Enter Name: ")
age = int(input("Enter Age: "))
sem = int(input("Enter Semester:"))
fees = int(input("Enter fees: "))
stipend = int(input("Enter Stipend: "))
s_dict[usn] = UGStudent(usn, name, age, sem, fees, stipend)
elif chc == 3:
for i in s_dict.keys():
print(s_dict[i].display_data())
elif chc == 4:
print("Exiting!")
break
Multilevel
#multilevel inheritance
class student:
def __init__(self):
self.usn = None
self.name = None
self.age = None
def getdata(self):
self.usn = int(input("Enter the USN: "))
self.name = input("Enter the name: ")
self.age = int(input("Enter the age: "))
class derived1(student):
def __init__(self):
super().__init__()
self.subject1 = None
self.subject2 = None
self.subject3 = None
self.subject4 = None
self.subject5 = None
def sub_marks(self):
super().getdata()
self.subject1 = int(input("Enter the marks of subject 1: "))
self.subject2 = int(input("Enter the marks of subject 2: "))
self.subject3 = int(input("Enter the marks of subject 3: "))
self.subject4 = int(input("Enter the marks of subject 4: "))
self.subject5 = int(input("Enter the marks of subject 5: "))
def cal(self):
total = (self.subject1 + self.subject2 + self.subject3 +
self.subject4 + self.subject5)
percentage = (total / 500) * 100
return total, percentage
class derived2(derived1):
def displays(self):
self.sub_marks()
total, per = self.cal()
print(f"USN: {self.usn}, Name: {self.name}, Age: {self.age}")
print("Total Marks:", total)
print("Percentage:", per)
s = derived2()
s.displays()
-------6----------------
Lab 5
class student:
def get(self, name=None, age=None):
if (name != None) & (age == None):
print("Hello", name)
elif (name != None) & (age != None):
print("Hello,I am" ,name ,"My age is ", int(age))
else:
print("Hello")
s = student()
while True:
print(" 1.with no input \n 2.with input \n 3.with 2 inputs")
ch = int(input("Enter your choice:"))
if ch == 1:
s.get()
continue
elif ch == 2:
s.get("pavan")
continue
elif ch == 3:
s.get("pavan", 22)
else:
print("nothing")
------------7--------------

Lab 7
class Employee:
def __init__(self, first, last, empid, pay):
self.first = first
self.last = last
self.empid = empid
self.pay = pay
def display_details(self):
print(f"Name: {self.first} {self.last}")
print(f"Empid: {self.empid}")
print(f"Salary: {self.pay}")
class Developer(Employee):
def apply_raise(self, raise_amount=0.1):
self.pay *= 1 + raise_amount
class Manager(Employee):
def apply_raise(self, raise_amount=0.2):
self.pay *= 1 + raise_amount
# Creating Developer objects with the correct number of arguments
dev_1 = Developer("x", "y", "001", 60000)
dev_2 = Developer("a", "b", "002", 70000)
# Creating Manager objects with the correct number of arguments
mgr_1 = Manager("tom", "jones", "101", 80000)
mgr_2 = Manager("john", "doe", "102", 90000)
print("--before raise--")
dev_1.display_details()
mgr_1.display_details()
dev_1.apply_raise()
mgr_1.apply_raise()
print("--after raise--")
dev_1.display_details()
mgr_1.display_details()
----------8-------------------
Lab 8
while True:
print("1.Check Value Error")
print("2.Check File Not Found Error")
print("3.Check Type Error")
print("4.Check IOError")
print("5.Name Error")
print("0.Exit")
n = int(input("Enter Choice:"))
if n == 1:
try:
f = open("f1.txt", "z")
print("Successful")
except ValueError:
print("Value Error")
elif n == 2:
try:
f = open("f9.txt", "r")
print("Successful")
except FileNotFoundError:
print("File Not Found error")
elif n == 3:
try:
f = open("f1.txt", "r", "w")
print("Successful")
except TypeError:
print("Type Error")
elif n == 4:
try:
f = open("f1", "w")
f.read()
except IOError:
print("IO Error")
elif n == 5:
try:
f = opens("f1.txt", "r")
print("Successful")
except NameError:
print("Name Error")
elif n == 0:
break
else:
print("Invalid input")
----------9------------
Lab 9
import mysql.connector
class My_Database:
def __init__(self):
self.db = mysql.connector.connect(host="localhost",
user="root", password="pavan_123", database="test")
self.cur = self.db.cursor()
sql = """CREATE TABLE IF NOT EXISTS EMPLOYEE(
empid INT PRIMARY KEY,
name VARCHAR(40) NOT NULL,
age INT,
des VARCHAR(30),
salary INT,
status INT,
mobileNo VARCHAR(30),
address VARCHAR(30)
)"""
self.cur.execute(sql)
self.db.commit()
print("Table created")
def insert(self, empid, name, age, des, salary, status, mobileNo,
address):
sql = """INSERT INTO EMPLOYEE
VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"""
values = (empid, name, age, des, salary, status, mobileNo,
address)
self.cur.execute(sql, values)
self.db.commit()
print("One record inserted")
def show(self):
sql = """SELECT * FROM EMPLOYEE"""
self.cur.execute(sql)
record = self.cur.fetchall()
print("Database Content:")
for r in record:
print(r)
def update(self, name, empid):
sql = """UPDATE EMPLOYEE SET name=%s WHERE empid=%s"""
values = (name, empid)
self.cur.execute(sql, values)
self.db.commit()
print("Record Updated")
def delete(self, empid):
sql = """DELETE FROM EMPLOYEE WHERE empid=%s"""
values = (empid)
self.cur.execute(sql, values)
self.db.commit()
print("One record deleted")
dbObj = My_Database()
while True:
print("\n1.Insert\n2.Show\n3.Update\n4.Delete\n5.Break")
ch = int(input("Enter a Choice:"))
if ch == 1:
empid = int(input("Enter empid:"))
name = input("Enter Name:")
age = int(input("Enter age:"))
des = input("Enter Designation:")
sal = int(input("Enter Salary:"))
status = int(input("Enter status:"))
mob = input("Enter Mobile No:")
address = input("Enter Address:")
dbObj.insert(empid, name, age, des, sal, status, mob, address)
elif ch == 2:
dbObj.show()
elif ch == 3:
empid = int(input("Enter empid:"))
name = input("Enter new Name:")
dbObj.update(name, empid)
elif ch == 4:
empid = int(input("Enter empid:"))
dbObj.delete(empid)
elif ch == 5:
break
else:
print("Invalid choice, please try again.")
print("Done")
-------10---------------
Lab 10
import time
def timeit(func):
def timed():
ts = time.time()
result = func()
te = time.time()
print("Time taken %3.2f ms" % ((te - ts) * 10 * 6))
return result
return timed
@timeit
def fib():
a, b = 0, 1
while True:
yield a
a, b = b, a + b
num = int(input("Enter the size for Fibonacci series: "))
fibonacci = fib()
for x in range(num):
print(next(fibonacci))